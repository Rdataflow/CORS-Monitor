name: WMS Monitor

on:
  workflow_dispatch:
  push:
  pull_request:
  schedule:
    - cron: '0 3 * * 1'

jobs:
  monitor:
    name: Monitor WMS endpoints üìç
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get list of Endpoints üìç
        run: |
          until `[ -s endpoints.txt ]` ; do curl -s -L https://github.com/geoadmin/web-mapviewer/raw/refs/heads/develop/packages/mapviewer/src/modules/menu/components/advancedTools/ImportCatalogue/external-providers.json | jq -r '.[]' | grep -v -i 'wmts'  > endpoints.txt || sleep 2 ; done
      - name: Check WMS support for CORS & EPSG:38657 üîé
        run: |
          mkdir -p output
          echo '<h1>WMS endpoints supporting CORS and EPSG:3857</h1>' >> output/index.html
          echo '<p><a href="result_cors.txt">raw CORS results<a></p>' >> output/index.html
          echo '<p><a href="result_epsg3857.txt">raw EPSG:3857 results<a></p>' >> output/index.html
          echo '<pre>' >> output/index.html
          for i in `cat endpoints.txt | sed -e 's/\(\?\|$\)\(.*\)/\?\2\&REQUEST=GetCapabilities\&SERVICE=WMS\&VERSION=1.3.0\&FORMAT=text%2Fxml/'`
          do 
            echo -n testing $i ... | tee -a output/index.html
            curl -s -L -H 'Origin: example.org' $i -v 2>&1 > query.log
            grep -i -e '^< access-control-allow-origin: \(\*\|example.org\)' query.log > /dev/null && \
            echo $i >> output/result_cors.txt && echo -n ‚úÖ | tee -a output/index.html || echo -n ‚ùå | tee -a output/index.html
            grep -i -e 'EPSG:3857' query.log > /dev/null && \
            echo $i >> output/result_epsg3857.txt && echo ‚úÖ | tee -a output/index.html || echo ‚ùå | tee -a output/index.html
          done
          echo === cors ===
          cat output/result_cors.txt
          echo === epsg:3857 ===
          cat output/result_epsg3857.txt
      - name: Upload Pages artifact
        id: upload
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'output'
          retention-days: 90

  deploy:
    name: Deploy result
    needs: monitor
    runs-on: ubuntu-latest
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # or specific "vX.X.X" version tag for this action
